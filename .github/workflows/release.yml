name: Release (tag on main)

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write   # Release 作成に必要

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate tag name (SemVer-ish)
        run: |
          TAG="${GITHUB_REF_NAME}"
          if [[ ! "$TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)(-[0-9A-Za-z.-]+)?(\+[0-9A-Za-z.-]+)?$ ]]; then
            echo "::error::Invalid tag format: ${TAG} (expected v1.2.3)"
            exit 1
          fi

      - name: Ensure tag commit is on main
        run: |
          git fetch origin main
          git merge-base --is-ancestor "${GITHUB_SHA}" origin/main || {
            echo "::error::Tag commit is not on main"
            exit 1
          }

      - name: Determine previous tag
        id: prev
        run: |
          PREV=$(git tag --sort=-creatordate | grep -E '^v[0-9]+' | grep -v "^${GITHUB_REF_NAME}$" | head -n1 || true)
          echo "prev=$PREV" >> "$GITHUB_OUTPUT"

      - name: Generate PR-based Release Notes
        id: notes
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const curTag = process.env.GITHUB_REF_NAME;
            const prevTag = "${{ steps.prev.outputs.prev }}";
            let compare;
            if (prevTag) {
              compare = await github.rest.repos.compareCommits({owner, repo, base: prevTag, head: curTag});
            } else {
              compare = await github.rest.repos.compareCommits({owner, repo, base: "main~50", head: curTag});
            }
            const shas = compare.data.commits.map(c => c.sha);
            const prMap = new Map();
            for (const sha of shas) {
              const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({owner, repo, commit_sha: sha});
              for (const pr of prs.data) {
                if (pr.base?.ref === "main") prMap.set(pr.number, pr);
              }
            }
            const prs = Array.from(prMap.values())
              .sort((a,b) => new Date(a.merged_at) - new Date(b.merged_at));
            const lines = [];
            lines.push(`## ${curTag} - ${new Date().toISOString().slice(0,10)}`);
            lines.push("");
            if (prs.length === 0) {
              lines.push("_No PRs merged in this range._");
            } else {
              for (const pr of prs) {
                const title = pr.title.replace(/\r?\n/g, " ");
                lines.push(`- ${title} ([#${pr.number}](${pr.html_url})) by @${pr.user.login}`);
              }
            }
            core.setOutput("body", lines.join("\n"));

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install deps
        run: pnpm install --frozen-lockfile=false

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

      - name: Package ZIP
        run: pnpm zip

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          prerelease: ${{ contains(github.ref_name, '-') }}
          body: ${{ steps.notes.outputs.body }}
          files: |
            artifacts/*.zip
            dist/**/*
